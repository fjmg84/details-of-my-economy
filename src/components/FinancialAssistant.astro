---
import AssistantIcon from "./Icons/AssistantIcon.astro";

// No server-side logic needed for this component
---

<!-- Quick Report Buttons -->
<div class="mb-4">
  <p class="text-sm font-medium text-gray-700 mb-2">Reportes rápidos:</p>
  <div class="flex flex-wrap gap-2">
    <button
      id="report-summary"
      class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm hover:bg-blue-200 transition-colors"
    >
      Resumen General
    </button>
    <button
      id="report-expenses"
      class="px-3 py-1 bg-red-100 text-red-800 rounded-full text-sm hover:bg-red-200 transition-colors"
    >
      Análisis de Gastos
    </button>
    <button
      id="report-income"
      class="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm hover:bg-green-200 transition-colors"
    >
      Análisis de Ingresos
    </button>
    <button
      id="report-categories"
      class="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm hover:bg-purple-200 transition-colors"
    >
      Por Categorías
    </button>
    <button
      id="report-trends"
      class="px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full text-sm hover:bg-yellow-200 transition-colors"
    >
      Tendencias
    </button>
  </div>
</div>

<!-- Chat Interface -->
<div class="border rounded-lg">
  <!-- Messages Container -->
  <div id="chat-messages" class="h-72 overflow-y-auto p-4 bg-gray-50 border-b">
    <div class="text-center text-gray-500 text-sm">
      ¡Hola! Soy Demia, tu asistente financiera. Puedes preguntarme sobre tus
      transacciones o solicitar un reporte usando los botones de arriba.
    </div>
  </div>

  <!-- Input Area -->
  <div class="p-4 bg-white">
    <div class="flex gap-2">
      <input
        type="text"
        id="user-question"
        placeholder="Pregúntame sobre tus finanzas..."
        class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
      />
      <button
        id="send-question"
        class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<!-- Loading Indicator -->
<div id="loading-indicator" class="hidden mt-4 text-center">
  <div class="inline-flex items-center px-4 py-2 bg-indigo-100 rounded-lg">
    <svg
      class="animate-spin -ml-1 mr-3 h-5 w-5 text-indigo-600"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        class="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        stroke-width="4"></circle>
      <path
        class="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
    <span class="text-indigo-800">Demia está analizando...</span>
  </div>
</div>

<script>
  import {
    generateFinancialReportStream,
    askAboutTransactionsStream,
  } from "../utils/ollama/fnOllama";

  // DOM Elements
  const chatMessages = document.getElementById("chat-messages");
  const userQuestionInput = document.getElementById(
    "user-question"
  ) as HTMLInputElement;
  const sendButton = document.getElementById("send-question");
  const loadingIndicator = document.getElementById("loading-indicator");

  // Report buttons
  const reportButtons = {
    "report-summary": "summary",
    "report-expenses": "expenses",
    "report-income": "income",
    "report-categories": "categories",
    "report-trends": "trends",
  };

  // Add message to chat
  function addMessage(content: string, isUser: boolean = false): HTMLElement {
    const messageDiv = document.createElement("div");
    messageDiv.className = `mb-3 ${isUser ? "text-right" : "text-left"}`;

    const messageBubble = document.createElement("div");
    messageBubble.className = `inline-block max-w-xs lg:max-w-2xl px-4 py-2 rounded-lg ${
      isUser
        ? "bg-indigo-600 text-white"
        : "bg-white border border-gray-200 text-gray-800"
    }`;

    messageBubble.innerHTML = content.replace(/\n/g, "<br>");
    messageDiv.appendChild(messageBubble);

    if (chatMessages) {
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    return messageBubble;
  }

  // Add streaming message (returns the bubble element for updates)
  function addStreamingMessage(): HTMLElement {
    const messageDiv = document.createElement("div");
    messageDiv.className = "mb-3 text-left";

    const messageBubble = document.createElement("div");
    messageBubble.className =
      "inline-block max-w-xs lg:max-w-2xl px-4 py-2 rounded-lg bg-white border border-gray-200 text-gray-800";
    messageBubble.innerHTML =
      '<span class="text-gray-400">Escribiendo...</span>';

    messageDiv.appendChild(messageBubble);

    if (chatMessages) {
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    return messageBubble;
  }

  // Update streaming message content
  function updateStreamingMessage(bubble: HTMLElement, content: string) {
    bubble.innerHTML = content.replace(/\n/g, "<br>");
    if (chatMessages) {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
  }

  // Show/hide loading
  function setLoading(loading: boolean) {
    if (loadingIndicator) {
      loadingIndicator.classList.toggle("hidden", !loading);
    }
    if (sendButton) {
      (sendButton as HTMLButtonElement).disabled = loading;
    }
  }

  // Handle user question with streaming
  async function handleUserQuestion(question: string) {
    if (!question.trim()) return;

    addMessage(question, true);
    setLoading(true);

    const streamingBubble = addStreamingMessage();
    let accumulatedContent = "";

    try {
      await askAboutTransactionsStream(question, (chunk: string) => {
        accumulatedContent += chunk;
        updateStreamingMessage(streamingBubble, accumulatedContent);
      });
    } catch (error) {
      console.error("Error asking question:", error);
      updateStreamingMessage(
        streamingBubble,
        "Lo siento, ocurrió un error al procesar tu pregunta. Asegúrate de que Ollama esté ejecutándose."
      );
    } finally {
      setLoading(false);
    }
  }

  // Handle report generation with streaming
  async function handleReportGeneration(reportType: string) {
    const reportNames = {
      summary: "Resumen General",
      expenses: "Análisis de Gastos",
      income: "Análisis de Ingresos",
      categories: "Análisis por Categorías",
      trends: "Análisis de Tendencias",
    };

    const reportName =
      reportNames[reportType as keyof typeof reportNames] || reportType;
    addMessage(`Generar ${reportName}`, true);
    setLoading(true);

    const streamingBubble = addStreamingMessage();
    let accumulatedContent = "";

    try {
      await generateFinancialReportStream(
        reportType as any,
        (chunk: string) => {
          accumulatedContent += chunk;
          updateStreamingMessage(streamingBubble, accumulatedContent);
        }
      );
    } catch (error) {
      console.error("Error generating report:", error);
      updateStreamingMessage(
        streamingBubble,
        "Lo siento, ocurrió un error al generar el reporte. Asegúrate de que Ollama esté ejecutándose."
      );
    } finally {
      setLoading(false);
    }
  }

  // Event listeners
  if (sendButton) {
    sendButton.addEventListener("click", () => {
      const question = userQuestionInput?.value || "";
      if (question.trim()) {
        handleUserQuestion(question);
        userQuestionInput.value = "";
      }
    });
  }

  if (userQuestionInput) {
    userQuestionInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        const question = userQuestionInput.value || "";
        if (question.trim()) {
          handleUserQuestion(question);
          userQuestionInput.value = "";
        }
      }
    });
  }

  // Report button listeners
  Object.entries(reportButtons).forEach(([buttonId, reportType]) => {
    const button = document.getElementById(buttonId);
    if (button) {
      button.addEventListener("click", () => {
        handleReportGeneration(reportType);
      });
    }
  });
</script>

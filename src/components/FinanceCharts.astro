---
import Container from "@components/Container.astro";
---

<!-- Charts -->
<div style="display: flex; flex-direction: column; gap: 1.5rem;">
  <div
    style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1.5rem;"
  >
    <Container title="Ingresos (Últimos 30 días)">
      <canvas id="incomeChart"></canvas>
    </Container>
    <Container title="Gastos (Últimos 30 días)">
      <canvas id="expenseChart"></canvas>
    </Container>
  </div>
</div>

<script>
  import type { Chart } from "chart.js";
  import { generateChart } from "src/utils/chart";
  import { EVENT_NAME } from "src/utils/config";
  import { getTransactions } from "src/utils/storage";

  // At the top of your script section
  const chartRefs = {
    income: { current: null as Chart | null },
    expense: { current: null as Chart | null },
  };

  function generateIncomeChart() {
    const transactions = getTransactions();
    const income = transactions.filter((t) => t.type === "income").slice(-30);

    generateChart({
      chartRef: chartRefs.income,
      title: "Ingresos (Últimos 30 días)",
      labels: income.map((t) => new Date(t.date).toLocaleDateString()),
      data: income.map((t) => t.amount),
      type: "bar",
      elementId: "incomeChart",
      options: {
        backgroundColor: "#16a34a80",
      },
    });
  }

  function generateExpenseChart() {
    const transactions = getTransactions();
    const expense = transactions.filter((t) => t.type === "expense").slice(-30);

    generateChart({
      chartRef: chartRefs.expense,
      title: "Gastos (Últimos 30 días)",
      labels: expense.map((t) => new Date(t.date).toLocaleDateString()),
      data: expense.map((t) => t.amount),
      type: "bar",
      elementId: "expenseChart",
      options: {
        backgroundColor: "#ef444480",
      },
    });
  }

  window.addEventListener("load", () => {
    generateIncomeChart();
    generateExpenseChart();
  });

  // Listen for localStorage changes
  window.addEventListener("storage", (e) => {
    if (e.key === "transactions") {
      generateIncomeChart();
      generateExpenseChart();
    }
  });

  // Listen for custom events (for same-tab updates)
  window.addEventListener(EVENT_NAME.TRANSACTIONS_UPDATED, () => {
    generateIncomeChart();
    generateExpenseChart();
  });
</script>
